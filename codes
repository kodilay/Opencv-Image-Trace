import cv2

# Takip edilecek nesnenin rengi
object_color = (0, 255, 0)

# Video kaynağı olarak webcam kullanılıyor
video = cv2.VideoCapture(0)

# Nesnenin ilk konumu, ilk değerler sıfır veriliyor
object_location = (0, 0, 0, 0)

# Nesne takibi için kullanılacak Haar Cascade sınıflandırıcı dosyası yükleniyor
cascade = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")

# Video oynatılırken her bir kare için işlem yapılıyor
while True:
    # Bir sonraki kareyi al
    ret, frame = video.read()

    # Eğer kare alınamazsa döngüyü sonlandır
    if not ret:
        break

    # Gri tonlama ve histogram eşitleme uygula
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    gray = cv2.equalizeHist(gray)

    # Haar Cascade sınıflandırıcı kullanarak nesneyi tespit et
    objects = cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5, minSize=(30, 30))

    # Nesneyi takip etmek için en büyük nesneyi seç
    largest_object = None
    largest_area = 0
    for (x, y, w, h) in objects:
        if w * h > largest_area:
            largest_object = (x, y, w, h)
            largest_area = w * h

    # Eğer nesne tespit edilirse, nesneyi takip etmek için nesnenin konumunu güncelle
    if largest_object is not None:
        object_location = largest_object

    # Nesne konumunu çerçeve üzerinde göster
    (x, y, w, h) = object_location
    cv2.rectangle(frame, (x, y), (x + w, y + h), object_color, 2)

    # Çerçeveyi ekrana göster
    cv2.imshow("Object Tracker", frame)

    # Programı sonlandırmak için "q" tuşuna bas
    if cv2.waitKey(1) & 0xFF == ord("q"):
        break

# Video kaynağını serbest bırak ve pencereleri kapat
video.release()
cv2.destroyAllWindows()
